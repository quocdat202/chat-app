{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { GiftedChat } from 'react-native-gifted-chat';\nimport { db } from \"../Firebase\";\nimport { collection, addDoc, onSnapshot } from 'firebase/firestore';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport function Chat(_ref) {\n  var route = _ref.route;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      messages = _useState2[0],\n      setMessages = _useState2[1];\n\n  var idRoom = route.params.idRoom;\n  var user = route.params.user;\n  var messagesRef = collection(db, \"messages\");\n  useEffect(function () {\n    var unsub = onSnapshot(collection(db, \"messages\"), function (snapshot) {\n      var arrayMessages = [];\n      snapshot.docs.forEach(function (doc) {\n        if (doc.data().idRoom === idRoom) arrayMessages.push({\n          _id: doc.data()._id,\n          createdAt: doc.data().createdAt.toDate(),\n          idRoom: doc.data().idRoom,\n          text: doc.data().text,\n          user: doc.data().user\n        });\n      });\n      arrayMessages.sort(function (a, b) {\n        return b.createdAt - a.createdAt;\n      });\n      setMessages(arrayMessages);\n    });\n  }, []);\n\n  var _onSend = useCallback(function _callee() {\n    var messages,\n        _messages$,\n        _id,\n        createdAt,\n        text,\n        user,\n        _args = arguments;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            messages = _args.length > 0 && _args[0] !== undefined ? _args[0] : [];\n            setMessages(function (previousMessages) {\n              return GiftedChat.append(previousMessages, messages);\n            });\n            _messages$ = messages[0], _id = _messages$._id, createdAt = _messages$.createdAt, text = _messages$.text, user = _messages$.user;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(addDoc(messagesRef, {\n              _id: _id,\n              createdAt: createdAt,\n              idRoom: idRoom,\n              text: text,\n              user: user\n            }));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, []);\n\n  return _jsx(_Fragment, {\n    children: _jsx(GiftedChat, {\n      messages: messages,\n      showAvatarForEveryMessage: true,\n      onSend: function onSend(messages) {\n        return _onSend(messages);\n      },\n      user: user\n    })\n  });\n}","map":{"version":3,"sources":["D:/Đồ án web/chat-app/Pages/Chat.js"],"names":["React","useState","useCallback","useEffect","GiftedChat","db","collection","addDoc","onSnapshot","Chat","route","messages","setMessages","idRoom","params","user","messagesRef","unsub","snapshot","arrayMessages","docs","forEach","doc","data","push","_id","createdAt","toDate","text","sort","a","b","onSend","previousMessages","append"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport {Button , View} from 'react-native'\r\nimport { GiftedChat } from 'react-native-gifted-chat'\r\nimport {db} from '../Firebase'\r\nimport { collection, addDoc, onSnapshot} from 'firebase/firestore';\r\nexport function Chat({route}) {\r\n  const [messages, setMessages] = useState([]);\r\n  const idRoom = route.params.idRoom;\r\n  const user = route.params.user;\r\n  const messagesRef = collection(db,\"messages\");\r\n\r\n  useEffect(() => {\r\n    const unsub = onSnapshot(collection(db, \"messages\"), (snapshot) => {\r\n        var arrayMessages = [];\r\n        snapshot.docs.forEach(doc => {\r\n          if(doc.data().idRoom === idRoom) arrayMessages.push({\r\n              _id : doc.data()._id,\r\n              createdAt : doc.data().createdAt.toDate(),\r\n              idRoom : doc.data().idRoom,\r\n              text : doc.data().text,\r\n              user : doc.data().user\r\n          })\r\n        })\r\n        arrayMessages.sort((a,b) => b.createdAt - a.createdAt)\r\n        setMessages(arrayMessages);\r\n    });\r\n  }, [])\r\n  const onSend = useCallback(async (messages = []) => {\r\n    setMessages(previousMessages => GiftedChat.append(previousMessages, messages)) \r\n    const {_id,createdAt,text,user} = messages[0];\r\n    await addDoc(messagesRef, {\r\n        _id  : _id,\r\n        createdAt : createdAt,\r\n        idRoom : idRoom ,\r\n        text : text,\r\n        user : user,\r\n      });\r\n  }, [])\r\n  return(\r\n    <>\r\n    <GiftedChat\r\n      messages={messages}\r\n      showAvatarForEveryMessage={true}\r\n      onSend={messages => onSend(messages)}\r\n      user={user}\r\n    />\r\n     </>\r\n  )\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}